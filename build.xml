<project name="oshajava" default="build">
	
	<!-- properties -->
	
	<property name="top.package" value="${ant.project.name}" />

	<property name="src.dir"  value="src" />
	<property name="libs.dir" value="libs" />
	
	<property name="asm.version" value="3.2" />
	<property name="asm.lib"     value="${libs.dir}/asm-${asm.version}/lib" />
	<property name="asm.src.dir" value="${libs.dir}/asm-${asm.version}/src" />
	
	<property name="acme.src.dir" value="${libs.dir}/acmeutils/src" />
	
	<property name="build.dir"    value="build" />
	<property name="classes.dir"  value="${build.dir}/classes" />
	<property name="bin.dir"      value="${build.dir}/bin" />
	<property name="runtime.bin"  value="${bin.dir}/oshajava" />
	<property name="compiler.bin" value="${bin.dir}/oshajavac" />
	<property name="paths.script" value="setup.sh" />
	<property name="module.rm.bin" value="${bin.dir}/oshamodrm" />
	<property name="module.prettyprinter" value="${bin.dir}/oshamodpp" />
	
	<property name="agent.jar"      value="${build.dir}/${ant.project.name}.jar" />
	<property name="annotation.jar" value="${agent.jar}" />
	
	<property name="agent.class" value="${top.package}.instrument.InstrumentationAgent" />
	<property name="premain.class" value="${top.package}.runtime.Config" />
	<property name="main.class" value="${top.package}.runtime.OshaJavaMain" />
	<property name="processor.class" value="${top.package}.spec.SpecProcessor" />
	<property name="class.loader" value="${top.package}.instrument.InstrumentingClassLoader" />
	
	<!-- build targets -->
	
	<target name="build" depends="jar,bin" description="Build ${ant.project.name}." />
		
	<target name="clean" description="Clean build files.">
		<delete dir="${build.dir}" />
		<delete file="${paths.script}" />
	</target>
	
	<target name="compile">
		<mkdir dir="${classes.dir}" />
		<javac srcdir="${asm.src.dir}" destdir="${classes.dir}" />
		<javac srcdir="${acme.src.dir}" destdir="${classes.dir}" />
		<javac srcdir="${src.dir}" destdir="${classes.dir}">
			<exclude name="**/oshajava/rtviz/*" />
		   <!-- <classpath path=".:libs/prefuse.jar"/> -->
		</javac>
	</target>
		
	<target name="jar" depends="compile">
		<jar destfile="${agent.jar}" index="true">
			<manifest>
				<attribute name="Premain-Class" value="${premain.class}" />
				<attribute name="Agent-Class" value="${agent.class}" />
			</manifest>
			<service type="javax.annotation.processing.Processor" provider="${processor.class}" />
			<fileset dir="${classes.dir}" includes="**/*.class" />
			<!-- <zipfileset src="libs/prefuse.jar" /> -->
			<!-- <indexjars refid="libs.classpath" /> -->
		</jar>
	</target>

	<target name="bin">
		<mkdir dir="${bin.dir}" />
		
		<!-- Generate setup.sh to set some environment variables. -->
		<echo file="${paths.script}">export PATH=$$PATH:${basedir}/${bin.dir}
			export OSHAJAVA_JAR=${basedir}/${agent.jar}
			export OSHAJAVA_ANNOTATION_CLASSPATH=$$OSHAJAVA_JAR
			export OSHAJAVA_CLASSPATH=$$OSHAJAVA_JAR
			export OSHAJAVA_PROCESSOR_CLASS=${processor.class}
		</echo>
		
		<!-- Generate the javac wrapper script -->
		<echo file="${compiler.bin}">#!/bin/sh
JAVAC=javac
case "$1" in
-version)
    version
    exit
    ;;
-javac=*)
    JAVAC=`echo "$1" | sed -e "s+-javac=++"`
    shift
    ;;	  
esac
#echo $JAVAC -Xbootclasspath/a:${basedir}/${agent.jar} -processorpath ${basedir}/${agent.jar} -processor ${processor.class} $$@
$$JAVAC -Xbootclasspath/a:${basedir}/${agent.jar} -processorpath ${basedir}/${agent.jar} -processor ${processor.class} $$@
</echo>
		<!-- Generate the java wrapper script -->
		<echo file="${runtime.bin}">#!/bin/sh
OSHA_ARGS=""
JVM_ARGS=""
JVM="java"
			
## read osha args
while [ -n "$1" -a "-javaOptions" != "$1" -a "--" != "$1" ]
do
	case "$1" in
	-java=*)	
			JVM=`echo "$1" | sed -e "s+-java=++"`
			if [ -z "$OSHA_ARGS" ]
			then
				OSHA_ARGS="$1"
			else
				OSHA_ARGS="$OSHA_ARGS,$1"
			fi
			;;
	-*)		
			if [ -z "$OSHA_ARGS" ]
			then
				OSHA_ARGS="$1"
			else
				OSHA_ARGS="$OSHA_ARGS,$1"
			fi
			;;
	esac
	shift
done
			
if [ "-javaOptions" = "$1" ]
then
	shift
fi
			
			
			
## read java args
while [ -n "$1" -a "--" != "$1" ]
do
	case "$1" in
	-jar) 
		shift
		CLASSPATH="$1:$CLASSPATH"
		test -d "META-INF" &amp;&amp; mv META-INF META-INF.oshajava.back
		jar xf $$1 META-INF/MANIFEST.MF
		MAIN=`grep "^Main-Class:" META-INF/MANIFEST | awk '{print $2}'`
		rm -rf META-INF
		test -d "META-INF.oshajava.back" &amp;&amp; mv META-INF.oshajava.back META-INF
		;;
	-cp|-classpath) 
		shift
		CLASSPATH="$CLASSPATH:$1"
		;;
	*) 
		JVM_ARGS="$$JVM_ARGS $1" 
		;;
	esac
    shift
done

if [ -n "$1" ]
then
	shift
fi
			
test -z "$1" &amp;&amp; OSHA_ARGS="$OSHA_ARGS,-help"

export CLASSPATH
#echo $$JVM -javaagent:${basedir}/${agent.jar}=$$OSHA_ARGS -Xbootclasspath/a:${basedir}/${agent.jar} $$JVM_ARGS ${main.class} $$MAIN $$@
$$JVM -version
$$JVM -javaagent:${basedir}/${agent.jar}=$$OSHA_ARGS -Xbootclasspath/a:${basedir}/${agent.jar} $$JVM_ARGS ${main.class} $$MAIN $$@

		</echo>

		<!-- Generate the module rm script -->
		<echo file="${module.rm.bin}">#!/usr/bin/env ruby
classpath = ENV['CLASSPATH']
if ARGV.first == "-cp" or ARGV.first == "-classpath"
	classpath = ARGV[1]
end
classpath ||= "."
classpath.split(":").each do |d|
	system "find #{d} -name '*.omi' -delete"
	system "find #{d} -name '*.oms' -delete"
	system "find #{d} -name '*.omm' -delete"
end
		</echo>	
		
		<echo file="${module.prettyprinter}">#!/bin/sh
			java -cp ${basedir}/${agent.jar} oshajava.util.ObjectFilePrinter $@
		</echo>
		
		<!-- make everything in build/bin executable -->
		<chmod perm="a+x" type="file">
			<fileset dir="${bin.dir}" includes="*" />	
		</chmod>
	</target>
	
</project>
